{"files":{"01_how_to_use_decorators.rst.md":{"mtime":1579105015387.183,"size":12885,"hash":"9f0ad8662835ef310734175fae4de47566871ac654c5338ecabaa8fa4481841d"},"02_HDF5_python.md":{"mtime":1595945645903.4277,"size":35170,"hash":"c3afcae5b0029b1e1177e1f6317e945c2a2fed99a7c488164467069996dcbaef"},"03_Virtual_Environment.rst.md":{"mtime":1579105015388.1892,"size":9707,"hash":"1eda733c452c6a9cbf387cf0d3c75d777ca0ec043b4d2119baed2d39850fdaaa"},"04_how_to_use_decorators_2.rst.md":{"mtime":1579105015388.1892,"size":19698,"hash":"faaf1a19ccf43f2f7dbba7f50250702db73b1dd44ca7cc5a7d97544a883c8394"},"05_how_to_control_network.rst.md":{"mtime":1579105015389.1775,"size":13620,"hash":"91090a96c898f5eb605be74adc1f3ef0c4c39dddb6faf63001981c6f6c3924ed"},"06_introducing_lantz.rst.md":{"mtime":1579105015389.1775,"size":11526,"hash":"6e1f5054c0bbfad0d7a228be6b19ad4ebecec44b1fb400448c41d93cc7dcaee8"},"07_national_instruments_python.rst.md":{"mtime":1579105015389.1775,"size":10835,"hash":"62302852a1bc65510071cc270f7ee99d44004ae759a5c5ad41121c305e09e41c"},"08_intro_to_classes.rst.md":{"mtime":1579105015390.175,"size":18204,"hash":"39b2469b2cc0881779d90e642960c8ef047216a04ca6bd3e215421773c7362cb"},"10_threads_or_processes.rst.md":{"mtime":1579105015390.175,"size":34439,"hash":"3bf4e296963e99a74107976e03da27f154a2a1be10187e8966751e5173f93073"},"11_documenting.rst.md":{"mtime":1579105015391.1724,"size":28165,"hash":"76bcc2252fdb0ac7862159d2f6a73495a27d858cecdb19e518cdd5ff66e1564f"},"12_handling_exceptions.rst.md":{"mtime":1579105015391.1724,"size":29010,"hash":"631d57a71acf232032c5d57c0a30c7d00d77a59fe35ce1e6c5c1ca9ed20d75c0"},"13_storing_data.rst.md":{"mtime":1579105015392.1772,"size":29251,"hash":"b19b12837b437cb63e34bb0ed850a99ab83e000a1d45f437bde9a26d96056a80"},"14_Storing_data_2.rst.md":{"mtime":1579105015392.1772,"size":30946,"hash":"7425654e191915c8b96a316fb954185869b92f3666ad3bb15c69872ddfa86de4"},"15_Storing_data_3.rst.md":{"mtime":1579105015393.1675,"size":27879,"hash":"338d62579357fe767e28f5f737224d500752eeac7ad0341a28b432f9eae43700"},"16_context_manager.rst.md":{"mtime":1579105015393.1675,"size":10782,"hash":"03d74504bf4d38163c79f743edef317e8c700388ce0d5d2d445dc80219ed4749"},"17_mutable_and_immutable.rst.md":{"mtime":1579105015394.1675,"size":18190,"hash":"3f524226a6edf81898ae3e1782742562b55e6ec84cae899068ec8097b9670d9b"},"18_mutable_tuples.rst.md":{"mtime":1579105015394.1675,"size":5882,"hash":"16cb90d35c7fd62a3dae1d2be4d1d82c78dd0c589937f0432a3abbd6b4d3d6f0"},"19_hashable_objects.rst.md":{"mtime":1579105015394.1675,"size":8839,"hash":"1af964d4bd0dee238688c27887f49c501c8d98877e4bcb13f7ebcc9b59eea92b"},"20_deep_shallow_copies.rst.md":{"mtime":1579105015395.167,"size":13187,"hash":"c2cbb8b7d22a9057da7eb83586dd866b07946a9238b580e96beb048f32f157bc"},"21_Default_Attributes_Classes.rst.md":{"mtime":1579105015395.167,"size":7716,"hash":"21baf244d0bd5a18f8f7ab36aa70e751a5b7e404848255437baef5726bfaf16a"},"22_Step_by_step_qt.rst.md":{"mtime":1579105015396.1592,"size":45326,"hash":"f06a875145082d7c2318495c2602f9cdbcc4d0277126092cd12dbba9425bb8fd"},"24_Releasing_PyNTA.rst.md":{"mtime":1579105015396.1592,"size":8441,"hash":"c37deff8f637289503c8cf4b877ddcbb422f71ea5ff0ab2aa35409b8600bea17"},"25_ZMQ.rst.md":{"mtime":1579105015396.1592,"size":28533,"hash":"19fa85f4992d860a02e0e40944f920daf721cf565a48122ba6ba1cd27404834a"},"26_ZMQ.rst.md":{"mtime":1579105015397.1565,"size":32951,"hash":"3460c18117bf6a8e02943ab47e288d845dd4e7ee06bf419493418122cb408af1"},"27_Custom_CRM.rst.md":{"mtime":1579105015398.16,"size":44356,"hash":"d913e4f059bc87fff825d026aa82b64672a429354b0714798fbf0ae35c2c0c7f"},"29_args_kwargs.rst.md":{"mtime":1591976993140.846,"size":14894,"hash":"b069c863572911a119cd85376e8e3c6d93ddaa109b808588a23c9f56bbc9d3e5"},"30_Lambda_Fuctions.rst.md":{"mtime":1579105015398.16,"size":10505,"hash":"14102eb8d92facc37baf613b212f46c341647a5c76a8af2ef5506319108056a3"},"31_Threads_Part_1.rst.md":{"mtime":1579105015399.1614,"size":25610,"hash":"90f33fb2c1f673ae1df66cc7000cf1166ddd2ae39625de20d48d3d3d37d9487a"},"32_Threads_Part_2.rst.md":{"mtime":1579105015399.1614,"size":29579,"hash":"ccd56756ebd2fd95782b5d42a0c0e7b11c6948d061a6c9e2af1e0e5b496be3a0"},"33_duck_typing.rst.md":{"mtime":1579105015400.1514,"size":11661,"hash":"0f19dc4a6524b2c5f93bdee60336aae638f1c43133b6265f7d0070bd92db9e58"},"34_monkey_patching.rst.md":{"mtime":1579105015400.1514,"size":12342,"hash":"07feb01f896794e4a5314124636002c5849dc389144eb00988d5e8485eae1fdf"},"37_absolute_relative_imports.rst.md":{"mtime":1579105015401.1458,"size":34312,"hash":"6d6de78f57c043c593bb3cd775a6539d1e77c8ad23facd27ae4dda793dc1bcc2"},"38_creating_setup_py.md":{"mtime":1579105015401.1458,"size":25356,"hash":"23da47ddb309f619772848449a78a76a5c957ea5ee0b2964235b75306d71b15c"},"39_use_arduino_with_python.md":{"mtime":1580813302453.1455,"size":32018,"hash":"a72a285565f52994c44f9a5976d8440ce61c3d9fd9143a04f35b45caea04ab7d"},"40_type_checking.md":{"mtime":1591976993141.8386,"size":23,"hash":"dbacf142d0675eb5e5a9349df86cbd12b093a85afe5f6a2c37c31e1f8bf6ba98"},"41_generators_iterators.md":{"mtime":1591976993141.8386,"size":23800,"hash":"31cd8982e1d8e15f4c19a0bfd48835f869b8924d2cc1d13a66450b82d21a6e07"},"42_descriptors.md":{"mtime":1591976993143.8318,"size":26072,"hash":"bc2be2c5e88a22442f34509715f107528daa21b6e7173147c14a36883a462707"},"_idea_accessing_raspberry.rst.md":{"mtime":1579105015402.0774,"size":7177,"hash":"e5f72dd45fd38775598695bbd05daf23fd35584a5a600be97536b0189f1d23f7"},"_idea_conda_installable.md":{"mtime":1579105015403.0767,"size":88,"hash":"f4851aa43e524efc3f0c68bfc8ce180c33107262649e37f884b1a5a999fca850"},"_idea_release_pypi.md":{"mtime":1579105015403.0767,"size":62,"hash":"3d6b8b981c09bee24eaae55a1e8f12f3f55630d0481348c0f667a2264a2d15b9"},"_idea_threads_face_recognition.rst.md":{"mtime":1579105015403.0767,"size":511,"hash":"5f07c6ebacc462ecbc9b694b22d65403d81856f848576c5573f55e109157f002"},"_idea_Threads_Part_3.rst.md":{"mtime":1579105015402.0774,"size":10749,"hash":"b74c3d53eb4cf351156cfba4d2cec3c18c24289747e39cdca6c466f37715a536"},"_idea_using_fabric.rst.md":{"mtime":1579105015403.0767,"size":508,"hash":"680fcf222e56430cda800db9f9048cd295b674766d574a88d0d2aa6692fbf297"},"_using_cookiecutter.md":{"mtime":1591976993143.8318,"size":4295,"hash":"1f701de8c5ff328c47621016465977355188964d427db329554e6712a80556a1"}},"metadata":{"9f0ad8662835ef310734175fae4de47566871ac654c5338ecabaa8fa4481841d":{"links":[{"line":327,"link":"{filename}04_how_to_use_decorators_2.rst","original":"[Follow Up\nArticle](%7Bfilename%7D04_how_to_use_decorators_2.rst)","displayText":"Follow Up\nArticle","beforeContext":"If you want to learn more about decorators, there is a ","afterContext":"Article"}],"embeds":[],"tags":[],"headings":[{"line":83,"heading":"Functions as arguments and as outputs of other functions","level":1},{"line":213,"heading":"Syntactic Sugar for Decorators","level":1}]},"1eda733c452c6a9cbf387cf0d3c75d777ca0ec043b4d2119baed2d39850fdaaa":{"links":[],"embeds":[],"tags":[],"headings":[{"line":151,"heading":"How does the Virtual Environment Work","level":1},{"line":188,"heading":"Be careful with name clashes","level":2},{"line":221,"heading":"Conclusions","level":1}]},"faaf1a19ccf43f2f7dbba7f50250702db73b1dd44ca7cc5a7d97544a883c8394":{"links":[{"line":18,"link":"{filename}01_how_to_use_decorators.rst","original":"[previous article on the use of decorators to validate user\ninput](%7Bfilename%7D01_how_to_use_decorators.rst)","displayText":"previous article on the use of decorators to validate user\ninput","beforeContext":"In a ","afterContext":"input, we have seen justthe very beginning of what decorators are able to provide to thedeveloper. Let’s first recap what we saw earlier. We can define adecorator as a function that will take as input another function. We canuse it to check the input of the latter, for example:"},{"line":51,"link":"{filename}01_how_to_use_decorators.rst","original":"[first article published on\ndecorators](%7Bfilename%7D01_how_to_use_decorators.rst)","displayText":"first article published on\ndecorators","beforeContext":"In the first case, the function would work, giving as output 1.5,while in the second case it would raise an exception because one of thearguments is not positive. If you can’t understand the code above, youshould check the ","afterContext":"decorators."}],"embeds":[],"tags":[],"headings":[{"line":57,"heading":"Docstrings with decorators","level":1},{"line":152,"heading":"Arguments in decorators","level":1},{"line":203,"heading":"When are decorators executed","level":1},{"line":299,"heading":"Decorators for methods in classes","level":1},{"line":370,"heading":"Classes as decorators","level":1},{"line":454,"heading":"Decorators for classes","level":1},{"line":543,"heading":"Conclusions","level":1}]},"91090a96c898f5eb605be74adc1f3ef0c4c39dddb6faf63001981c6f6c3924ed":{"links":[{"line":115,"link":"{filename}06_introducing_lantz.rst","original":"[How to Write a Driver with\nLantz](%7Bfilename%7D06_introducing_lantz.rst)","displayText":"How to Write a Driver with\nLantz","beforeContext":"Let’s assume you have a device like the one we developed in our earlierpost ","afterContext":"Lantz. The device is anoscilloscope with several built-in methods, including idn for gettingits serial number, and datasource to set and get the channel used foran acquisition. We would like to trigger some of those methods when wehead to specific addresses on our browser. Later on, we will change thebrowser by a custom-made client that will simplify our workflow. Webegin by initializing the device and we make it available to the app:"},{"line":140,"link":"{filename}06_introducing_lantz.rst","original":"[oscilloscope with\nLantz](%7Bfilename%7D06_introducing_lantz.rst)","displayText":"oscilloscope with\nLantz","beforeContext":"The core is the same as before, but we have added some lines for thedevice. We import the needed classes and we initialize the communicationwith the device; you should adapt the highlighted lines with your owndevice. The new route now establishes that if you head tolocalhost:5000/idn, the serial number of the device is going to bereturned. This action is much more complex than printing on the serveror returning a simple string. What we are actually sending is a commandto a device, waiting for it to return a value and then we are sending itback to the browser. With this simple example, you can already see thatwe are doing virtually everything that a device can handle. Of course,devices also take inputs, and we should take into account this. Basingourselves on the example of an ","afterContext":"Lantz, we could change thedatasource property of the device like this:"}],"embeds":[],"tags":[],"headings":[]},"6e1f5054c0bbfad0d7a228be6b19ad4ebecec44b1fb400448c41d93cc7dcaee8":{"links":[],"embeds":[],"tags":[],"headings":[{"line":179,"heading":"Using Units","level":1},{"line":247,"heading":"Conclusions","level":1}]},"62302852a1bc65510071cc270f7ee99d44004ae759a5c5ad41121c305e09e41c":{"links":[],"embeds":[],"tags":[],"headings":[]},"39b2469b2cc0881779d90e642960c8ef047216a04ca6bd3e215421773c7362cb":{"links":[],"embeds":[],"tags":[],"headings":[{"line":31,"heading":"Defining a Class","level":1},{"line":152,"heading":"Initializing classes","level":1},{"line":227,"heading":"Defining class attributes","level":1},{"line":278,"heading":"Inheritance","level":1},{"line":384,"heading":"Finer details of classes","level":1},{"line":394,"heading":"Printing objects","level":2},{"line":443,"heading":"Defining complex properties","level":2},{"line":508,"heading":"Conclusions","level":1}]},"3bf4e296963e99a74107976e03da27f154a2a1be10187e8966751e5173f93073":{"links":[],"embeds":[],"tags":[],"headings":[{"line":21,"heading":"A Simple Measurement Class","level":1},{"line":66,"heading":"Running the measurement in a non-blocking way","level":1},{"line":125,"heading":"What are Threads","level":1},{"line":146,"heading":"Plotting Results During Acquisition","level":1},{"line":233,"heading":"Multiple Threads","level":1},{"line":303,"heading":"Stopping a Thread","level":1},{"line":362,"heading":"Subclassing a Thread","level":1},{"line":464,"heading":"Using Locks","level":1},{"line":519,"heading":"Advantages and Limitations of Threads","level":1},{"line":602,"heading":"The GIL","level":2},{"line":637,"heading":"The Multiprocessing Module","level":1},{"line":676,"heading":"Sharing Information with Queues","level":1},{"line":747,"heading":"Limitation of Queues","level":1},{"line":773,"heading":"Threads and Jupyter","level":1},{"line":791,"heading":"Conclusions","level":1}]},"76bcc2252fdb0ac7862159d2f6a73495a27d858cecdb19e518cdd5ff66e1564f":{"links":[{"line":29,"link":"{filename}03_Virtual_Environment.rst","original":"[Virtual Environment](%7Bfilename%7D03_Virtual_Environment.rst)","displayText":"Virtual Environment","beforeContext":"To start with this tutorial, we will need to build a simple module, withsome classes and functions. My recommendation is to work inside a","afterContext":". Startby creating a folder to hold your project. Inside create a new foldercalled my_module and add an empty __init__.py file. Create afile called factorial.py and add the following code:"},{"line":673,"link":"{filename}03_Virtual_Environment.rst","original":"[our article on the Virtual\nEnvironment](%7Bfilename%7D03_Virtual_Environment.rst)","displayText":"our article on the Virtual\nEnvironment","beforeContext":"If you have a file that lists all the packages that have to be installedfor your program to work, Read The Docs can automatically install themin a virtual environment and then build the documentation. That is whatthe requirements.txt file is for. You can see how to generate one byreading ","afterContext":"Environment. The otherimportant parameter is the location of the conf.py file. Normallyyou would place it in docs/source/conf.py, but that can change fromproject to project. You can go through the rest of the options. Rememberto set the proper Python version that you need for your program to run."}],"embeds":[{"line":349,"link":"/images/10_images/01_base_page.png","original":"![screenshot of the documentation](/images/10_images/01_base_page.png)","beforeContext":"","afterContext":""},{"line":396,"link":"/images/10_images/02_base_module.png","original":"![screenshot of the documentation of a module](/images/10_images/02_base_module.png)","beforeContext":"","afterContext":""},{"line":648,"link":"/images/10_images/RTL_settings.png","original":"![Read the docs settings](/images/10_images/RTL_settings.png)","beforeContext":"","afterContext":""},{"line":653,"link":"/images/10_images/RTL_settings.png","original":"![Connecting services to RTL](/images/10_images/RTL_settings.png)","beforeContext":"","afterContext":""},{"line":662,"link":"/images/10_images/RTL_advance_settings.png","original":"![Connecting services to RTL](/images/10_images/RTL_advance_settings.png)","beforeContext":"","afterContext":""},{"line":684,"link":"/images/10_images/RTL_advanced_settings.png","original":"![Connecting services to RTL](/images/10_images/RTL_advanced_settings.png)","beforeContext":"","afterContext":""},{"line":694,"link":"/images/10_images/RTL_versions.png","original":"![Connecting services to RTL](/images/10_images/RTL_versions.png)","beforeContext":"","afterContext":""}],"tags":[],"headings":[{"line":26,"heading":"Building a Simple Module","level":1},{"line":75,"heading":"Adding Docstrings","level":1},{"line":171,"heading":"From docstrings to doctest","level":1},{"line":217,"heading":"Documenting classes and methods","level":1},{"line":278,"heading":"Building Documentation with Sphinx","level":1},{"line":351,"heading":"Adding the documentation of your modules","level":2},{"line":431,"heading":"Customizing the pages","level":2},{"line":496,"heading":"Styling the Docstrings","level":1},{"line":537,"heading":"Linking to other modules","level":2},{"line":558,"heading":"Running tests with Sphinx","level":1},{"line":621,"heading":"Read The Docs","level":1},{"line":719,"heading":"Conclusions","level":1}]},"631d57a71acf232032c5d57c0a30c7d00d77a59fe35ce1e6c5c1ca9ed20d75c0":{"links":[{"line":599,"link":"{filename}04_how_to_use_decorators_2.rst","original":"[decorators](%7Bfilename%7D04_how_to_use_decorators_2.rst)","displayText":"decorators","beforeContext":"When you are developing your own packages, it is often useful to definesome common exceptions. This gives a great deal of flexibility becauseit allows other developers to handle those exceptions as they findappropriate. Let’s see an example. Imagine that you want to write afunction that calculates the average between two numbers, but you wantboth numbers to be positive. This is the same example that we have seenwhen working with","afterContext":". We start bydefining the function:"}],"embeds":[],"tags":[],"headings":[{"line":31,"heading":"Try ... Except","level":1},{"line":118,"heading":"Catching Specific Exceptions","level":1},{"line":177,"heading":"Re-raising Exceptions","level":1},{"line":215,"heading":"Exceptions in Exceptions","level":1},{"line":264,"heading":"Several Exceptions","level":1},{"line":382,"heading":"The Finally Statement","level":1},{"line":471,"heading":"The else Block","level":1},{"line":547,"heading":"The Traceback","level":1},{"line":596,"heading":"Raising Custom Exceptions","level":1},{"line":678,"heading":"Best Practices for Custom Exceptions","level":1},{"line":748,"heading":"Adding Arguments to Exceptions","level":1},{"line":796,"heading":"Conclusions","level":1}]},"b19b12837b437cb63e34bb0ed850a99ab83e000a1d45f437bde9a26d96056a80":{"links":[{"line":14,"link":"{filename}14_Storing_data_2.rst","original":"[Storing Binary Data and Serializing\nObjects](%7Bfilename%7D14_Storing_data_2.rst)","displayText":"Storing Binary Data and Serializing\nObjects","beforeContext":"","afterContext":"Objects"},{"line":16,"link":"{filename}15_Storing_data_3.rst","original":"[Using Databases to Store Data](%7Bfilename%7D15_Storing_data_3.rst)","displayText":"Using Databases to Store Data","beforeContext":"","afterContext":""},{"line":17,"link":"{filename}02_HDF5_python.rst","original":"[Using HDF5 Files with Python](%7Bfilename%7D02_HDF5_python.rst)","displayText":"Using HDF5 Files with Python","beforeContext":"","afterContext":""},{"line":189,"link":"{filename}12_handling_exceptions.rst","original":"[unhandled exceptions](%7Bfilename%7D12_handling_exceptions.rst)","displayText":"unhandled exceptions","beforeContext":"If you start saving partial data often, you will notice that, especiallywhen your program crashes, some of the data points may be missing.Writing to disk is a step that is handled by the operating system, andtherefore its behavior can be very different depending on which one youuse and how busy the computer is. Python puts the writing instructionsinto a queue, which means that the writing itself can be executed muchlater in time. If you want to be sure that changes are being written,especially when you are aware that your program may give rise to","afterContext":", youcan add the flush command. Simply like this:"},{"line":716,"link":"{filename}13_storing_data.rst","original":"[Introduction to Storing Data in\nFiles](%7Bfilename%7D13_storing_data.rst)","displayText":"Introduction to Storing Data in\nFiles","beforeContext":"","afterContext":"Files"},{"line":718,"link":"{filename}14_Storing_data_2.rst","original":"[Storing Binary Data and\nSerializing](%7Bfilename%7D14_Storing_data_2.rst)","displayText":"Storing Binary Data and\nSerializing","beforeContext":"","afterContext":"Serializing"},{"line":720,"link":"{filename}15_Storing_data_3.rst","original":"[Using Databases to Store Data](%7Bfilename%7D15_Storing_data_3.rst)","displayText":"Using Databases to Store Data","beforeContext":"","afterContext":""},{"line":721,"link":"{filename}02_HDF5_python.rst","original":"[Using HDF5 Files with Python](%7Bfilename%7D02_HDF5_python.rst)","displayText":"Using HDF5 Files with Python","beforeContext":"","afterContext":""}],"embeds":[],"tags":[],"headings":[{"line":33,"heading":"Plain Text Files with Numpy","level":1},{"line":116,"heading":"Loading Saved Data with Numpy","level":2},{"line":142,"heading":"Saving Partial Files with Numpy","level":1},{"line":186,"heading":"Flushing Changes","level":2},{"line":213,"heading":"The With Statement","level":2},{"line":245,"heading":"Lower-level Writing to Text Files","level":1},{"line":323,"heading":"Formatting the output","level":1},{"line":403,"heading":"Storing Data in Columns","level":1},{"line":434,"heading":"Reading the data","level":1},{"line":536,"heading":"Learning From Others","level":1},{"line":582,"heading":"Saving Non-Numeric Data","level":1},{"line":646,"heading":"Reading Non-Numeric Data","level":1}]},"7425654e191915c8b96a316fb954185869b92f3666ad3bb15c69872ddfa86de4":{"links":[{"line":14,"link":"{filename}13_storing_data.rst","original":"[Introduction to Storing Data in\nFiles](%7Bfilename%7D13_storing_data.rst)","displayText":"Introduction to Storing Data in\nFiles","beforeContext":"","afterContext":"Files"},{"line":16,"link":"{filename}14_Storing_data_2.rst","original":"[Storing Binary Data and\nSerializing](%7Bfilename%7D14_Storing_data_2.rst)","displayText":"Storing Binary Data and\nSerializing","beforeContext":"","afterContext":"Serializing"},{"line":18,"link":"{filename}15_Storing_data_3.rst","original":"[Using Databases to Store Data](%7Bfilename%7D15_Storing_data_3.rst)","displayText":"Using Databases to Store Data","beforeContext":"","afterContext":""},{"line":19,"link":"{filename}02_HDF5_python.rst","original":"[Using HDF5 Files with Python](%7Bfilename%7D02_HDF5_python.rst)","displayText":"Using HDF5 Files with Python","beforeContext":"","afterContext":""},{"line":787,"link":"{filename}13_storing_data.rst","original":"[Introduction to Storing Data in\nFiles](%7Bfilename%7D13_storing_data.rst)","displayText":"Introduction to Storing Data in\nFiles","beforeContext":"","afterContext":"Files"},{"line":789,"link":"{filename}14_Storing_data_2.rst","original":"[Storing Binary Data and\nSerializing](%7Bfilename%7D14_Storing_data_2.rst)","displayText":"Storing Binary Data and\nSerializing","beforeContext":"","afterContext":"Serializing"},{"line":791,"link":"{filename}15_Storing_data_3.rst","original":"[Using Databases to Store Data](%7Bfilename%7D15_Storing_data_3.rst)","displayText":"Using Databases to Store Data","beforeContext":"","afterContext":""},{"line":792,"link":"{filename}02_HDF5_python.rst","original":"[Using HDF5 Files with Python](%7Bfilename%7D02_HDF5_python.rst)","displayText":"Using HDF5 Files with Python","beforeContext":"","afterContext":""}],"embeds":[],"tags":[],"headings":[{"line":36,"heading":"What does it really mean to save text files","level":1},{"line":98,"heading":"Different encodings for text data","level":1},{"line":145,"heading":"Saving Numpy Arrays","level":1},{"line":251,"heading":"Intro to Pickle","level":1},{"line":305,"heading":"Pickling numpy arrays","level":1},{"line":352,"heading":"Pickling Functions","level":1},{"line":389,"heading":"Limitations of Pickle","level":1},{"line":470,"heading":"Risks of Pickle","level":1},{"line":540,"heading":"Serializing with JSON","level":1},{"line":589,"heading":"Combining JSON and Pickle","level":1},{"line":693,"heading":"Other Serialization Options","level":1},{"line":760,"heading":"Conclusions","level":1}]},"338d62579357fe767e28f5f737224d500752eeac7ad0341a28b432f9eae43700":{"links":[{"line":14,"link":"{filename}13_storing_data.rst","original":"[Introduction to Storing Data in\nFiles](%7Bfilename%7D13_storing_data.rst)","displayText":"Introduction to Storing Data in\nFiles","beforeContext":"","afterContext":"Files"},{"line":16,"link":"{filename}14_Storing_data_2.rst","original":"[Storing Binary Data and\nSerializing](%7Bfilename%7D14_Storing_data_2.rst)","displayText":"Storing Binary Data and\nSerializing","beforeContext":"","afterContext":"Serializing"},{"line":18,"link":"{filename}15_Storing_data_3.rst","original":"[Using Databases to Store Data](%7Bfilename%7D15_Storing_data_3.rst)","displayText":"Using Databases to Store Data","beforeContext":"","afterContext":""},{"line":19,"link":"{filename}02_HDF5_python.rst","original":"[Using HDF5 Files with Python](%7Bfilename%7D02_HDF5_python.rst)","displayText":"Using HDF5 Files with Python","beforeContext":"","afterContext":""},{"line":471,"link":"{filename}14_Storing_data_2.rst","original":"[previous\narticle](%7Bfilename%7D14_Storing_data_2.rst)","displayText":"previous\narticle","beforeContext":"Storing complex data into databases is not a trivial task. Databasesspecify only some data types and numpy arrays are not between them. Thismeans that we have to convert the arrays into something that can bestored in a database. Since SQLite specifies only 4 major data types, weshould stick to one of them. In the ","afterContext":"article we have discussed a lotabout serialization. The same ideas can be used to store an array in adatabase."},{"line":678,"link":"{filename}13_storing_data.rst","original":"[Introduction to Storing Data in\nFiles](%7Bfilename%7D13_storing_data.rst)","displayText":"Introduction to Storing Data in\nFiles","beforeContext":"","afterContext":"Files"},{"line":680,"link":"{filename}14_Storing_data_2.rst","original":"[Storing Binary Data and\nSerializing](%7Bfilename%7D14_Storing_data_2.rst)","displayText":"Storing Binary Data and\nSerializing","beforeContext":"","afterContext":"Serializing"},{"line":682,"link":"{filename}15_Storing_data_3.rst","original":"[Using Databases to Store Data](%7Bfilename%7D15_Storing_data_3.rst)","displayText":"Using Databases to Store Data","beforeContext":"","afterContext":""},{"line":683,"link":"{filename}02_HDF5_python.rst","original":"[Using HDF5 Files with Python](%7Bfilename%7D02_HDF5_python.rst)","displayText":"Using HDF5 Files with Python","beforeContext":"","afterContext":""}],"embeds":[],"tags":[],"headings":[{"line":34,"heading":"Databases","level":1},{"line":62,"heading":"Creating a Table","level":1},{"line":127,"heading":"Adding Data to a Database","level":1},{"line":167,"heading":"Retrieving Data","level":1},{"line":216,"heading":"Adding a Primary Key","level":1},{"line":279,"heading":"Default Values for Fields","level":1},{"line":331,"heading":"SQLite Data Types","level":1},{"line":363,"heading":"Relational Databases","level":1},{"line":468,"heading":"Storing Numpy Arrays into Databases","level":1},{"line":569,"heading":"Combining Information","level":1},{"line":630,"heading":"How to Use Databases in Scientific Projects","level":1},{"line":655,"heading":"Conclusions","level":1}]},"03d74504bf4d38163c79f743edef317e8c700388ce0d5d2d445dc80219ed4749":{"links":[{"line":199,"link":"{filename}12_handling_exceptions.rst","original":"[previous article on\nexceptions](%7Bfilename%7D12_handling_exceptions.rst)","displayText":"previous article on\nexceptions","beforeContext":"This is enough to make decisions based on the kind of information thatthe exception is providing. You can check the ","afterContext":"exceptions to have an idea ofthe kind of things you can accomplish."}],"embeds":[],"tags":[],"headings":[{"line":18,"heading":"Quick Introduction to the With Command","level":1},{"line":68,"heading":"Custom Classes and With","level":1},{"line":204,"heading":"With and Constructors","level":1},{"line":273,"heading":"Why Go to the Trouble","level":1},{"line":300,"heading":"Conclusions","level":1}]},"3f524226a6edf81898ae3e1782742562b55e6ec84cae899068ec8097b9670d9b":{"links":[{"line":450,"link":"{filename}12_handling_exceptions.rst","original":"[exception\nhandling](%7Bfilename%7D12_handling_exceptions.rst)","displayText":"exception\nhandling","beforeContext":"When we run calculate for the first time, there will be nothing storedin the cache dictionary, but if we execute the function more thanonce, cache will start changing, appending the new values to it. If werun calculate again with the same arguments, they are going to bepresent and their known value will be returned. Notice that we areleveraging the ","afterContext":"handling in order to avoidchecking explicitly whether the combination of values already exists inmemory."},{"line":567,"link":"{filename}21_Default_Attributes_Classes.rst","original":"[mutable or immutable variables as class\nattributes](%7Bfilename%7D21_Default_Attributes_Classes.rst)","displayText":"mutable or immutable variables as class\nattributes","beforeContext":"If you want to keep learning, you can read more aboutwhy tuples may seem to change <{filename}18_mutable_tuples.rst>_and what happens when you use ","afterContext":"attributes."}],"embeds":[],"tags":[],"headings":[{"line":31,"heading":"Lists and Tuples","level":1},{"line":89,"heading":"Mutable and Immutable Data Types","level":1},{"line":322,"heading":"Mutable Objects in Functions","level":1},{"line":386,"heading":"Default Arguments in Functions","level":1},{"line":460,"heading":"Your Own Immutable Objects","level":1},{"line":535,"heading":"Conclusions","level":1}]},"16cb90d35c7fd62a3dae1d2be4d1d82c78dd0c589937f0432a3abbd6b4d3d6f0":{"links":[{"line":11,"link":"{filename}17_mutable_and_immutable.rst","original":"[Introduction To Mutable and Immutable Data\nTypes](%7Bfilename%7D17_mutable_and_immutable.rst)","displayText":"Introduction To Mutable and Immutable Data\nTypes","beforeContext":"Broadly speaking, Python variables belong to one of two types:mutable and immutable. We have discussed this yesterday, in the","afterContext":"Types. The first one refersto those elements that can be changed without the need of creating a newone, while the latter refers to those that cannot be changed afterinstantiation. A paradigmatic example of immutable objects is tuples.However, as we are going to see in this article, tuples may seem tochange."},{"line":180,"link":"{filename}17_mutable_and_immutable.rst","original":"[discussion about mutable and immutable\ntypes](%7Bfilename%7D17_mutable_and_immutable.rst)","displayText":"discussion about mutable and immutable\ntypes","beforeContext":"This is a short article triggered by some comments that appear on the","afterContext":"types. Wrapping your mindaround this level of details may be hard at the beginning, but when youknow these differences exist, you will be able to make better code, lessprone to bugs. You may also start realizing why so many packages usetuples as default arguments instead of lists, etc."}],"embeds":[],"tags":[],"headings":[{"line":137,"heading":"Tuples as Dictionary Keys","level":1},{"line":177,"heading":"Conclusions","level":1}]},"1af964d4bd0dee238688c27887f49c501c8d98877e4bcb13f7ebcc9b59eea92b":{"links":[{"line":143,"link":"{filename}17_mutable_and_immutable.rst","original":"[before](%7Bfilename%7D17_mutable_and_immutable.rst)","displayText":"before","beforeContext":"We have seen ","afterContext":" thatthere are differences between mutable and immutable types in Python.Built-in immutable types have always a hash method, while mutable typesdon’t. However, this leaves outside custom defined classes. By default,all instances of custom classes will have a hash value defined atcreation and it will not change over time. Two instances of the sameclass will have two different hash values. For example:"}],"embeds":[],"tags":[],"headings":[{"line":140,"heading":"Hash Values of Custom Classes","level":1}]},"c2cbb8b7d22a9057da7eb83586dd866b07946a9238b580e96beb048f32f157bc":{"links":[{"line":18,"link":"{filename}17_mutable_and_immutable.rst","original":"[mutable data\ntypes](%7Bfilename%7D17_mutable_and_immutable.rst)","displayText":"mutable data\ntypes","beforeContext":"The discussion of deep and shallow copies is only worth having in thecontext of ","afterContext":"types, so if you are notsure of what that means, you can check the linked article. To refreshyour memory, let’s see quickly what happens when you copy a list, forexample:"},{"line":381,"link":"{filename}17_mutable_and_immutable.rst","original":"[mutable\nand immutable](%7Bfilename%7D17_mutable_and_immutable.rst)","displayText":"mutable\nand immutable","beforeContext":"It is very important to point out that, if are worried about copying anddeep copying of custom objects, you should understand what are ","afterContext":"and immutable objects inPython, and what are hashable\nobjectshashableobjects. When you have immutabledata types, such as an integer or a string, all the discussion abovedoesn’t work. If you change an immutable attribute in a class, thatattribute in deep-copied objects will not change."},{"line":381,"link":"{filename}19_hashable_objects.rst","original":"[hashable\nobjects](%7Bfilename%7D19_hashable_objects.rst)","displayText":"hashable\nobjects","beforeContext":"It is very important to point out that, if are worried about copying anddeep copying of custom objects, you should understand what are mutable\nand immutablemutableand immutable objects inPython, and what are ","afterContext":"objects. When you have immutabledata types, such as an integer or a string, all the discussion abovedoesn’t work. If you change an immutable attribute in a class, thatattribute in deep-copied objects will not change."}],"embeds":[],"tags":[],"headings":[{"line":125,"heading":"Copies of Custom Classes","level":1},{"line":191,"heading":"Custom shallow and deep copies of objects","level":1},{"line":261,"heading":"About the dict attribute","level":2},{"line":295,"heading":"Custom deep copy","level":1},{"line":359,"heading":"Why defining how to copy","level":1},{"line":378,"heading":"Last Warning","level":1}]},"21baf244d0bd5a18f8f7ab36aa70e751a5b7e404848255437baef5726bfaf16a":{"links":[{"line":11,"link":"{filename}17_mutable_and_immutable.rst","original":"[mutable and\nimmutable objects](%7Bfilename%7D17_mutable_and_immutable.rst)","displayText":"mutable and\nimmutable objects","beforeContext":"We have seen how to leverage the differences between ","afterContext":"immutable objects and whathappens when you use mutable types as default function arguments.However, we haven’t discussed what happens when you use mutable types asdefault attributes of classes."},{"line":90,"link":"{filename}17_mutable_and_immutable.rst","original":"[we have done when working with\nfunctions](%7Bfilename%7D17_mutable_and_immutable.rst)","displayText":"we have done when working with\nfunctions","beforeContext":"The same pattern that appeared while using mutable variables as defaultswith functions will appear when using mutable default arguments ofmethods in custom classes. If you want to avoid this from happening, youcan always check what ","afterContext":"functions."}],"embeds":[],"tags":[],"headings":[]},"f06a875145082d7c2318495c2602f9cdbcc4d0277126092cd12dbba9425bb8fd":{"links":[{"line":51,"link":"{filename}03_Virtual_Environment.rst","original":"[virtual\nenvironment](%7Bfilename%7D03_Virtual_Environment.rst)","displayText":"virtual\nenvironment","beforeContext":"Remember that the best practice is to be working in a ","afterContext":"environment to avoidconflicts with other libraries, etc. The installation procedure shouldalso install numpy. If you run into issues while installing OpenCV, youare free to ask them in the forumask them in the forumor you can check the official\ndocumentationthe officialdocumentation."},{"line":559,"link":"{filename}06_introducing_lantz.rst","original":"[develop our own drivers](%7Bfilename%7D06_introducing_lantz.rst)","displayText":"develop our own drivers","beforeContext":"When developing desktop applications that interface with real-worlddevices, then the meanings of each element in the MVC structure change.For instance, a controller would be the driver that is able tocommunicate with a device, which in our case is the camera. The driverwas developed by OpenCV, but it is very likely that at some point wewould ","afterContext":"."},{"line":1117,"link":"{filename}02_HDF5_python.rst","original":"[HDF5 files](%7Bfilename%7D02_HDF5_python.rst)","displayText":"HDF5 files","beforeContext":"Finally, the model is accumulating all the data into an attribute. Itcould be nice to have the option to save the movie or the picturesomewhere. You can add an extra button to achieve it, and if you arewilling, you can use ","afterContext":" tostore the data."}],"embeds":[{"line":272,"link":"/images/22_images/01_main_window.png","original":"![Main window with a button](/images/22_images/01_main_window.png)","beforeContext":"","afterContext":""},{"line":363,"link":"/images/22_images/02_mainwindowlayout.png","original":"![Main window layout](/images/22_images/02_mainwindowlayout.png)","beforeContext":"","afterContext":""},{"line":408,"link":"/images/22_images/03_two_buttons.png","original":"![Main window with two buttons](/images/22_images/03_two_buttons.png)","beforeContext":"","afterContext":""},{"line":471,"link":"/images/22_images/04_two_buttons_layout.png","original":"![Main window with two buttons using layout](/images/22_images/04_two_buttons_layout.png)","beforeContext":"","afterContext":""},{"line":987,"link":"/images/22_images/05_acquired_image.png","original":"![Window with a selfie after clicking a button](/images/22_images/05_acquired_image.png)","beforeContext":"","afterContext":""}],"tags":[],"headings":[{"line":32,"heading":"Installing OpenCV and PyQt5","level":1},{"line":117,"heading":"Welcome to OpenCV","level":1},{"line":198,"heading":"Welcome to PyQt","level":1},{"line":279,"heading":"Signals and Slots in Qt","level":1},{"line":434,"heading":"Adding Layouts for Styling","level":1},{"line":481,"heading":"Acquiring An Image from the GUI","level":1},{"line":541,"heading":"Layout of the Program: MVC design pattern","level":1},{"line":593,"heading":"The Camera Model","level":1},{"line":804,"heading":"Reusable Qt Windows: Subclassing","level":1},{"line":874,"heading":"Displaying an Image on the GUI","level":1},{"line":998,"heading":"Adding a Scrollbar for the Brightness","level":1},{"line":1042,"heading":"Acquiring a Movie: QtThreads","level":1},{"line":1102,"heading":"Extra Steps that You Can Try","level":1},{"line":1123,"heading":"Conclusions","level":1}]},"c37deff8f637289503c8cf4b877ddcbb422f71ea5ff0ab2aa35409b8600bea17":{"links":[],"embeds":[],"tags":[],"headings":[{"line":46,"heading":"ZMQ for inter-process communication","level":1},{"line":84,"heading":"Current Limitations","level":1},{"line":119,"heading":"Wish list for Pynta","level":1},{"line":140,"heading":"Possible Roadmap","level":1},{"line":154,"heading":"Getting PyNTA","level":1}]},"19fa85f4992d860a02e0e40944f920daf721cf565a48122ba6ba1cd27404834a":{"links":[{"line":22,"link":"{filename}24_Releasing_PyNTA.rst","original":"[released\nPyNTA](%7Bfilename%7D24_Releasing_PyNTA.rst)","displayText":"released\nPyNTA","beforeContext":"For example, I have recently ","afterContext":"PyNTA, a program to acquireimages from a camera with the option to analyze them in real time or tostore them to the hard drive or both. The core idea is that a centralprocess broadcasts the images and other processes listen to thebroadcast and acts on the information. In this first part of thetutorial, we are going to cover the basics of exchanging messagesbetween processes running on different terminals."},{"line":31,"link":"{filename}26_ZMQ.rst","original":"[Part\n2](%7Bfilename%7D26_ZMQ.rst)","displayText":"Part\n2","beforeContext":"We are going to develop a program to acquire images from a webcamcontinuously and share the data between different terminals. We aregoing to explore different patterns provided by the excellent pyZMQlibrary, focusing on practical examples and discussing the benefits andlimitations of them. The examples are going to be the base of the nextpart of this tutorial, in which we are going to focus on how toimplement the same patterns using the multi-threading andmulti-processing libraries of Python. On ","afterContext":"2 of this tutorial we are going to develop areal-world example using the topics learned here."},{"line":234,"link":"{filename}22_Step_by_step_qt.rst","original":"[building a\nGUI](%7Bfilename%7D22_Step_by_step_qt.rst)","displayText":"building a\nGUI","beforeContext":"Now that we have explored one of the ZMQ patterns, we can see how it canbe useful when dealing with a device. Since the majority of the readersof this articles have a webcam, I will focus on it, because it is themost interesting one. The same principles work with any other device ortask. We have already used a camera when we discussed ","afterContext":"GUI for it. I suggest you to giveit a quick read if you are not familiar with open CV."},{"line":307,"link":"{filename}14_Storing_data_2.rst","original":"[How to Store\nData with Python](%7Bfilename%7D14_Storing_data_2.rst)","displayText":"How to Store\nData with Python","beforeContext":"Check that in order to send the frame (which is a numpy array), we usesend_pyobj, which allows sending any data structure which isserializable with Pickle. We have covered this topic on ","afterContext":"Data with Python. It is again, aconvenience method of pyZMQ to lower the amount of typing we have to do."},{"line":539,"link":"{filename}02_HDF5_python.rst","original":"[to an\nHDF5 file](%7Bfilename%7D02_HDF5_python.rst)","displayText":"to an\nHDF5 file","beforeContext":"We will keep building on the camera example, but with a differentpattern. What we want to achieve is to have 3 processes. One thatcontinuously acquires from a camera and publishes the frames. Two moreprocesses independent from each other, one that calculates the FourierTransform, as we did before and another one that saves the images ","afterContext":"HDF5 file."},{"line":616,"link":"{filename}02_HDF5_python.rst","original":"[using\nhdf5](%7Bfilename%7D02_HDF5_python.rst)","displayText":"using\nhdf5","beforeContext":"You can run it now, and you will see that the messages start flowingright into the subscriber. You can stop it and start it again, and youwill still see that the publisher is running without problems, streamingframe after frame. You can see what happens if you start two subscribers(or more). You will notice that they all get the same information. Let’ssee a quick example of how to save data to the hard drive, ","afterContext":"hdf5. Let’s create a new subscriber,subscriber_2.py, with the following:"},{"line":664,"link":"{filename}02_HDF5_python.rst","original":"[this article](%7Bfilename%7D02_HDF5_python.rst)","displayText":"this article","beforeContext":"If you have installed HDF5 on your system, you can run this subscriber.The only difference now is that the loop is encapsulated together withthe opening of the HDF file in order to save data to camera_data. Ifyou are not familiar with how hdf5 works, I recommend you to check out","afterContext":". Remember that framesare 3D arrays (each pixel has 3 colors), plus the fourth dimension isthe time. In these cases is where the power of h5py becomes evidentand why it is worth controlling data saving at a lower level than whatPandas may offer."},{"line":701,"link":"{filename}10_threads_or_processes.rst","original":"[Threads and\nMultiprocessing](%7Bfilename%7D10_threads_or_processes.rst)","displayText":"Threads and\nMultiprocessing","beforeContext":"In the following article, we are going to explore how to triggerdifferent processes and threads from the same Python program. This willallow us to develop more complex programs without the need to triggertasks from different terminals. We are going to combine ","afterContext":"Multiprocessing, togetherwith socket communication."}],"embeds":[],"tags":[],"headings":[{"line":42,"heading":"ZMQ","level":1},{"line":66,"heading":"pyZMQ","level":1},{"line":85,"heading":"Request-Reply","level":2},{"line":231,"heading":"REQ-REP for a device","level":2},{"line":358,"heading":"Push-Pull","level":1},{"line":384,"heading":"Parallel Calculation of the Fourier Transform of an Image","level":2},{"line":514,"heading":"Publisher-Subscriber","level":1},{"line":536,"heading":"The PUB/SUB with a Camera","level":2},{"line":690,"heading":"Conclusions","level":1}]},"3460c18117bf6a8e02943ab47e288d845dd4e7ee06bf419493418122cb408af1":{"links":[{"line":15,"link":"{filename}25_ZMQ.rst","original":"[basics of pyZMQ](%7Bfilename%7D25_ZMQ.rst)","displayText":"basics of pyZMQ","beforeContext":"In this article, we are going to cover how you can leverage thepossibilities of ZMQ to exchange data between different processes inPython. We have covered the ","afterContext":"in part 1. This is a fairly advanced tutorial, in which we are not onlygoing to use pyZMQ, but also the multiprocessing library,HDF5HDF5, andopenCVopenCV. We are going to acquireimages from the webcam as fast as possible, we are going to save thedata to disk during the acquisition, and we are going to perform somebasic analysis."},{"line":15,"link":"{filename}02_HDF5_python.rst","original":"[HDF5](%7Bfilename%7D02_HDF5_python.rst)","displayText":"HDF5","beforeContext":"In this article, we are going to cover how you can leverage thepossibilities of ZMQ to exchange data between different processes inPython. We have covered the basics of pyZMQbasics of pyZMQin part 1. This is a fairly advanced tutorial, in which we are not onlygoing to use pyZMQ, but also the multiprocessing library,","afterContext":", andopenCVopenCV. We are going to acquireimages from the webcam as fast as possible, we are going to save thedata to disk during the acquisition, and we are going to perform somebasic analysis."},{"line":15,"link":"{filename}22_Step_by_step_qt.rst","original":"[openCV](%7Bfilename%7D22_Step_by_step_qt.rst)","displayText":"openCV","beforeContext":"In this article, we are going to cover how you can leverage thepossibilities of ZMQ to exchange data between different processes inPython. We have covered the basics of pyZMQbasics of pyZMQin part 1. This is a fairly advanced tutorial, in which we are not onlygoing to use pyZMQ, but also the multiprocessing library,HDF5HDF5, and","afterContext":". We are going to acquireimages from the webcam as fast as possible, we are going to save thedata to disk during the acquisition, and we are going to perform somebasic analysis."}],"embeds":[],"tags":[],"headings":[{"line":34,"heading":"Architecture","level":1},{"line":52,"heading":"Camera Control","level":1},{"line":106,"heading":"Multi-Threading","level":2},{"line":197,"heading":"Multi-Processing","level":2},{"line":284,"heading":"Publisher","level":1},{"line":420,"heading":"Analyse Data: Subscriber 1","level":1},{"line":540,"heading":"Save Data: Subscriber 2","level":1},{"line":631,"heading":"ZMQ and Queues","level":1},{"line":684,"heading":"Serializing Python Objects","level":1},{"line":703,"heading":"Zero-Copy Messages","level":1},{"line":743,"heading":"Conclusions","level":1}]},"d913e4f059bc87fff825d026aa82b64672a429354b0714798fbf0ae35c2c0c7f":{"links":[{"line":65,"link":"15_Storing_data_3.rst","original":"[store data using SQLite](15_Storing_data_3.rst)","displayText":"store data using SQLite","beforeContext":"We have now a web server, a platform, we only need to define how tostore the data. For this, I will choose SQLite. I have written in thepast about how to ","afterContext":", butin this article, we are going one step further by introducing an ORM, orObject Relational Mapping, which will greatly simplify our work whendefining tables, accessing data, etc."},{"line":75,"link":"03_Virtual_Environment.rst","original":"[Virtual\nEnvironment](03_Virtual_Environment.rst)","displayText":"Virtual\nEnvironment","beforeContext":"If you are familiar with the Jupyter notebooks, just skip this sectionand head to the next one. If you are not familiar with them, I will giveyou a very quick introduction. First, you need to install the neededpackage. If you are an Anaconda user, you have Jupyter by default. Ifyou are not, you should start by creating a ","afterContext":"Environment, and then do the following:"},{"line":194,"link":"16_context_manager.rst","original":"[this\narticle about the context manager](16_context_manager.rst)","displayText":"this\narticle about the context manager","beforeContext":"If you are not familiar with the with command you can check ","afterContext":"article about the context manager. If you wantto explore how your variable config looks like, you can simply writeit in a different cell and press Ctrl+Enter. The result is a dictionarywith the needed parameters for sending e-mail. So, let’s get to it."},{"line":476,"link":"{filename}15_Storing_data_3.rst","original":"[different article](%7Bfilename%7D15_Storing_data_3.rst)","displayText":"different article","beforeContext":"In order to achieve a high level of flexibility, we are going to use adatabase to store all our information. Fortunately, Python supportsSQLite databases out of the box. We have discussed about them in a","afterContext":" that may beuseful for you to check if you want to dig into the details. We aregoing to use a library called SQLAlchemy, which will allow us to definerelationships between elements much faster. You can install it like anyother Python package:"},{"line":1070,"link":"{filename}12_handling_exceptions.rst","original":"[handle the\nexception](%7Bfilename%7D12_handling_exceptions.rst)","displayText":"handle the\nexception","beforeContext":"In order to achieve that, we can ","afterContext":"exception. But since we areusing a generic exception, we will handle everything in the same way,regardless of whether it was raised because of an error in the databaseor because the message was repeated. The best strategy is therefore tocreate a custom exception:"}],"embeds":[{"line":108,"link":"/images/27_images/01_jupyter.jpg","original":"![Empty Jupyter Notebook](/images/27_images/01_jupyter.jpg)","beforeContext":"","afterContext":""},{"line":117,"link":"/images/27_images/02_jupyter.jpg","original":"![First Cell](/images/27_images/02_jupyter.jpg)","beforeContext":"","afterContext":""}],"tags":[],"headings":[{"line":38,"heading":"The Choices","level":1},{"line":72,"heading":"Jupyter Notebooks","level":1},{"line":138,"heading":"Sending Email","level":1},{"line":293,"heading":"Adding HTML to the message","level":2},{"line":355,"heading":"Receiving Email","level":1},{"line":465,"heading":"Using a Database","level":1},{"line":639,"heading":"Database Relationships","level":2},{"line":818,"heading":"Sending To All Customers","level":1},{"line":979,"heading":"Refactoring: Send to a list","level":2},{"line":1029,"heading":"Avoid repeating messages","level":1},{"line":1123,"heading":"Conclusions","level":1}]},"b069c863572911a119cd85376e8e3c6d93ddaa109b808588a23c9f56bbc9d3e5":{"links":[{"line":281,"link":"{filename}04_how_to_use_decorators_2.rst","original":"[decorators](%7Bfilename%7D04_how_to_use_decorators_2.rst)","displayText":"decorators","beforeContext":"Keeping in mind that it is impossible to make a comprehensive list ofsituations when it is worth using kwargs and args, we can discuss someexamples. The first that comes to mind is when you are dealing with","afterContext":". To give avery short summary, a decorator is a function that wraps another one inorder to extend its functionality without changing the core behavior.Going back to the example of the area, the function"},{"line":316,"link":"{filename}04_how_to_use_decorators_2.rst","original":"[this\narticle](%7Bfilename%7D04_how_to_use_decorators_2.rst)","displayText":"this\narticle","beforeContext":"If you are not familiar with decorators or the code above seemsconfusing, I recommend you check ","afterContext":"article. To use thisdecorator, we would simply do the following:"},{"line":350,"link":"{filename}22_Step_by_step_qt.rst","original":"[Qt\napplication](%7Bfilename%7D22_Step_by_step_qt.rst)","displayText":"Qt\napplication","beforeContext":"Another very common scenario where args and kwargs is very handy iswhen you are working with classes. In order to expand the functionalityof classes developed by others, a common pattern is to inherit them andoverride the methods you would like to change. This is very frequentwhen you are dealing with large libraries or frameworks. For example, ifyou are developing a ","afterContext":"application, you will findyourself with code like this:"}],"embeds":[],"tags":[],"headings":[{"line":18,"heading":"Args","level":1},{"line":126,"heading":"Kwargs","level":1},{"line":238,"heading":"When not to use args and kwargs","level":1},{"line":268,"heading":"When to use args and kwargs","level":1},{"line":278,"heading":"Decorators","level":2},{"line":347,"heading":"Inheritance","level":2},{"line":392,"heading":"Flexibility","level":2},{"line":422,"heading":"Conclusions","level":1}]},"14102eb8d92facc37baf613b212f46c341647a5c76a8af2ef5506319108056a3":{"links":[{"line":190,"link":"{filename}22_Step_by_step_qt.rst","original":"[introductory article on\nQt](%7Bfilename%7D22_Step_by_step_qt.rst)","displayText":"introductory article on\nQt","beforeContext":"Another common example of using lambdas is in combination with the Qtlibrary. We have written an ","afterContext":"Qt in the past. Feel free tobrowse through it if you are not familiar with how building userinterfaces work. A very minimal example, that just shows a button, itlooks like this:"}],"embeds":[],"tags":[],"headings":[{"line":124,"heading":"Pandas and Lambda Functions","level":1},{"line":187,"heading":"Qt Slots","level":1},{"line":223,"heading":"Where to use lambda functions","level":1},{"line":241,"heading":"Where not to use lambda functions","level":1},{"line":283,"heading":"Conclusions","level":1}]},"90f33fb2c1f673ae1df66cc7000cf1166ddd2ae39625de20d48d3d3d37d9487a":{"links":[{"line":18,"link":"{filename}10_threads_or_processes.rst","original":"[threads](%7Bfilename%7D10_threads_or_processes.rst)","displayText":"threads","beforeContext":"In this introduction, we are going to cover how you can use Threads todevelop a more flexible program. We have already discussed about","afterContext":", and we have usedthem when developing a user\ninterfacedeveloping a userinterface. In this article, weare going to organize the information available for you to learn how tobe creative with threads in your own programs."},{"line":18,"link":"{filename}22_Step_by_step_qt.rst","original":"[developing a user\ninterface](%7Bfilename%7D22_Step_by_step_qt.rst)","displayText":"developing a user\ninterface","beforeContext":"In this introduction, we are going to cover how you can use Threads todevelop a more flexible program. We have already discussed aboutthreadsthreads, and we have usedthem when ","afterContext":"interface. In this article, weare going to organize the information available for you to learn how tobe creative with threads in your own programs."},{"line":43,"link":"{filename}22_Step_by_step_qt.rst","original":"[avoid the window freezing](%7Bfilename%7D22_Step_by_step_qt.rst)","displayText":"avoid the window freezing","beforeContext":"The idea of threads is that each one can be executed in short pieces,and the computer has the freedom to switch, very quickly, between them.For a short time, it is checking your spelling, for a short time, itrenders a website, for a short time it writes to the hard drive, etc.This is what gives programs a smooth feeling, and it is exactly what wedid to ","afterContext":"when dealing with Qt."},{"line":201,"link":"{filename}17_mutable_and_immutable.rst","original":"[mutable and immutable data\ntypes](%7Bfilename%7D17_mutable_and_immutable.rst)","displayText":"mutable and immutable data\ntypes","beforeContext":"What you see in the code above is that the function increase_by_onetakes one argument and increases its value by one. If the argument is anumpy array, it will increase the value of each element by one. What isimportant to note, is that the function is not returning any value. Thiscan be done because arrays are mutable. You can check the article about","afterContext":"types in case you arecurious."},{"line":402,"link":"{filename}16_context_manager.rst","original":"[context managers](%7Bfilename%7D16_context_manager.rst)","displayText":"context managers","beforeContext":"By using ","afterContext":" thesyntax can become much simpler:"},{"line":692,"link":"{filename}32_Threads_Part_2.rst","original":"[how\nto handle data with threads in\nPython](%7Bfilename%7D32_Threads_Part_2.rst)","displayText":"how\nto handle data with threads in\nPython","beforeContext":"The examples that we have seen in this tutorial are almost trivial andmost are based on performing highly inefficient tasks, such asincreasing the values in an array one by one. If you want to continuelearning about threads, you can head to the following tutorial on ","afterContext":"to handle data with threads inPython."}],"embeds":[],"tags":[],"headings":[{"line":26,"heading":"What are not Threads","level":1},{"line":64,"heading":"A Simple Thread","level":1},{"line":177,"heading":"Shared Memory","level":1},{"line":310,"heading":"A More Extreme Example","level":2},{"line":362,"heading":"Synchronizing Threads with Locks","level":1},{"line":443,"heading":"Synchronizing Threads: RLocks","level":1},{"line":501,"heading":"Timeouts","level":1},{"line":562,"heading":"Events","level":1},{"line":614,"heading":"Stopping Threads with Events","level":2},{"line":682,"heading":"Conclusions","level":1}]},"ccd56756ebd2fd95782b5d42a0c0e7b11c6948d061a6c9e2af1e0e5b496be3a0":{"links":[{"line":17,"link":"{filename}31_Threads_Part_1.rst","original":"[how to start and synchronize\nthreads](%7Bfilename%7D31_Threads_Part_1.rst)","displayText":"how to start and synchronize\nthreads","beforeContext":"In the previous article, we have covered ","afterContext":"threads and now it is time toexpand the toolbox to handle the exchange of information between them."},{"line":24,"link":"{filename}31_Threads_Part_1.rst","original":"[previous\ntutorial](%7Bfilename%7D31_Threads_Part_1.rst)","displayText":"previous\ntutorial","beforeContext":"The first and most naive approach is to use the same variables indifferent threads. We have already used this feature in the ","afterContext":"tutorial, but without discussingit explicitly. Let’s see how we can use shared memory through a verysimple example:"},{"line":60,"link":"{filename}31_Threads_Part_1.rst","original":"[previous tutorial](%7Bfilename%7D31_Threads_Part_1.rst)","displayText":"previous tutorial","beforeContext":"The example above is almost trivial, but it has a very importantfeature. We start a new thread by passing an argument, my_var, whichis a list of numbers. The thread will increase the values of the numbersby one, with a certain delay. In this example we use events tograciously finish the thread, if you are not familiar with them, checkthe ","afterContext":"."},{"line":164,"link":"{filename}31_Threads_Part_1.rst","original":"[previous tutorial](%7Bfilename%7D31_Threads_Part_1.rst)","displayText":"previous tutorial","beforeContext":"In the ","afterContext":", wediscussed that threads are handled by the operating system, whichdecides when to spin one on or off. We have no control over what theoperating system decides to do. In the example above, since there is nosleep in the loop, the operating system will have to decide when tostop one and start another thread. However, that does not explaincompletely the output we are getting. It doesn’t matter if one threadruns first and stops, etc. we are always adding +1 to each element."},{"line":483,"link":"{filename}12_handling_exceptions.rst","original":"[custom\nexceptions](%7Bfilename%7D12_handling_exceptions.rst)","displayText":"custom\nexceptions","beforeContext":"Queues have some extra options, such as the maximum number of elementsthey can hold. You can also define LIFO (last-in, first-out) typesof queues, which you can read about in the\ndocumentationin thedocumentation.What I find more useful about Queues is that they are written in purePython. If you visit their source\ncodesourcecode, you canlearn a lot about synchronization in threads, ","afterContext":"exceptions, anddocumentingdocumenting."},{"line":483,"link":"{filename}11_documenting.rst","original":"[documenting](%7Bfilename%7D11_documenting.rst)","displayText":"documenting","beforeContext":"Queues have some extra options, such as the maximum number of elementsthey can hold. You can also define LIFO (last-in, first-out) typesof queues, which you can read about in the\ndocumentationin thedocumentation.What I find more useful about Queues is that they are written in purePython. If you visit their source\ncodesourcecode, you canlearn a lot about synchronization in threads, custom\nexceptionscustomexceptions, and","afterContext":"."},{"line":819,"link":"{filename}31_Threads_Part_1.rst","original":"[previous article](%7Bfilename%7D31_Threads_Part_1.rst)","displayText":"previous article","beforeContext":"In the ","afterContext":", we haveseen how you can use threading to run different functions at the sametime, and some of the most useful tools you have available to controlthe flow of different threads. In this article we have discussed how youcan share data between threads, exploiting both the fact of the sharedmemory between threads and by using queues."},{"line":834,"link":"{filename}22_Step_by_step_qt.rst","original":"[acquisition from\ndevices](%7Bfilename%7D22_Step_by_step_qt.rst)","displayText":"acquisition from\ndevices","beforeContext":"To finish, we have shown a very simple example of how to use threads todownload data from a website and save it to disk. The example is verybasic, but we will expand it in the following article. Other IO(input-output) tasks that can be explored are ","afterContext":"devices such as a camera, waitingfor user input, reading from diskreading from disk,etc."},{"line":834,"link":"{filename}13_storing_data.rst","original":"[reading from disk](%7Bfilename%7D13_storing_data.rst)","displayText":"reading from disk","beforeContext":"To finish, we have shown a very simple example of how to use threads todownload data from a website and save it to disk. The example is verybasic, but we will expand it in the following article. Other IO(input-output) tasks that can be explored are acquisition from\ndevicesacquisition fromdevices such as a camera, waitingfor user input, ","afterContext":",etc."}],"embeds":[],"tags":[],"headings":[{"line":21,"heading":"Shared Memory","level":1},{"line":202,"heading":"How to synchronize data access","level":1},{"line":235,"heading":"Queues","level":1},{"line":480,"heading":"Extra Options of Queues","level":1},{"line":577,"heading":"Queues to Stop Threads","level":1},{"line":624,"heading":"IO Bound threads","level":1},{"line":642,"heading":"Example downloading websites","level":2},{"line":816,"heading":"Conclusions","level":1}]},"0f19dc4a6524b2c5f93bdee60336aae638f1c43133b6265f7d0070bd92db9e58":{"links":[],"embeds":[],"tags":[],"headings":[{"line":64,"heading":"What is duck typing?","level":1},{"line":112,"heading":"Custom Classes","level":1},{"line":150,"heading":"Complex Data Structures","level":1},{"line":301,"heading":"Conclusions","level":1}]},"07feb01f896794e4a5314124636002c5849dc389144eb00988d5e8485eae1fdf":{"links":[{"line":22,"link":"{filename}17_mutable_and_immutable.rst","original":"[mutability in\nPython](%7Bfilename%7D17_mutable_and_immutable.rst)","displayText":"mutability in\nPython","beforeContext":"Monkey patching is tightly related to the idea of ","afterContext":"Python. Custom objects aremutable, and therefore their attributes can be replaced without creatinga new copy of the object. To quickly recap those ideas, we can do thefollowing:"},{"line":94,"link":"{filename}17_mutable_and_immutable.rst","original":"[mutable and\nimmutable](%7Bfilename%7D17_mutable_and_immutable.rst)","displayText":"mutable and\nimmutable","beforeContext":"Even if you change the attribute a to 3, you don’t see this changeappearing on the instances of the class. The root cause of this lays inthe ideas behind ","afterContext":"immutable data types inPython. Since you altered the value of var1.a, now the attribute ispointing to an object different from the object the class attributepoints to. If this last line doesn’t make sense, go to the articleslinked earlier on mutable and immutable data types."}],"embeds":[],"tags":[],"headings":[{"line":253,"heading":"Module-level monkey patching","level":1},{"line":331,"heading":"When (not) to Monkey Patch","level":1}]},"6d6de78f57c043c593bb3cd775a6539d1e77c8ad23facd27ae4dda793dc1bcc2":{"links":[],"embeds":[{"line":543,"link":"/images/37_images/PyCharm_config.png","original":"![PyCharm edit configuration menu](/images/37_images/PyCharm_config.png)","beforeContext":"","afterContext":""}],"tags":[],"headings":[{"line":17,"heading":"Introduction to importing","level":1},{"line":68,"heading":"Importing \\*","level":1},{"line":157,"heading":"Importing As","level":1},{"line":221,"heading":"Importing your code","level":1},{"line":406,"heading":"Adding Folder to the Path","level":1},{"line":490,"heading":"PYTHONPATH and Virtual Environment","level":2},{"line":534,"heading":"PYTHONPATH and PyCharm","level":2},{"line":559,"heading":"Absolute Imports","level":1},{"line":767,"heading":"Relative Imports","level":1},{"line":981,"heading":"Mixing Absolute and Relative","level":2},{"line":1006,"heading":"Absolute or Relative: Conclusions","level":1}]},"23da47ddb309f619772848449a78a76a5c957ea5ee0b2964235b75306d71b15c":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"How to create a setup file for your project","level":1},{"line":2,"heading":"Why having a setup","level":2},{"line":7,"heading":"Your first setup file","level":2},{"line":57,"heading":"Laying out the project","level":3},{"line":123,"heading":"Installing in development mode","level":3},{"line":172,"heading":"But where is the code?","level":3},{"line":201,"heading":"Installing with pip","level":3},{"line":223,"heading":"Installing from Github","level":3},{"line":251,"heading":"Adding an entry point","level":2},{"line":346,"heading":"Adding dependencies","level":2},{"line":358,"heading":"Difference with requirements files","level":3},{"line":365,"heading":"Extra Dependencies","level":2},{"line":410,"heading":"Where to next","level":2}]},"a72a285565f52994c44f9a5976d8440ce61c3d9fd9143a04f35b45caea04ab7d":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"Using Python to communicate with an Arduino","level":1},{"line":11,"heading":"Getting Started With Arduino","level":2},{"line":19,"heading":"The first Arduino program","level":2},{"line":24,"heading":"The Arduino Program Loop","level":2},{"line":39,"heading":"Switching on and off an LED (Blinking)","level":2},{"line":63,"heading":"Monitoring the status of the board","level":2},{"line":101,"heading":"Controlling the LED","level":2},{"line":126,"heading":"Controlling the LED","level":3},{"line":214,"heading":"Reading a signal","level":2},{"line":236,"heading":"Triggering a measurement","level":2},{"line":270,"heading":"Reading the Arduino from Python","level":2},{"line":415,"heading":"Querying the device","level":2},{"line":454,"heading":"PyVISA","level":2},{"line":494,"heading":"Next Steps","level":2},{"line":504,"heading":"Conclusions","level":2}]},"dbacf142d0675eb5e5a9349df86cbd12b093a85afe5f6a2c37c31e1f8bf6ba98":{"links":[],"embeds":[],"tags":[],"headings":[]},"31cd8982e1d8e15f4c19a0bfd48835f869b8924d2cc1d13a66450b82d21a6e07":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"Generators, Iterables, Iterators in Python: When and Where","level":1},{"line":5,"heading":"Iterables","level":2},{"line":43,"heading":"The \\_\\_getitem\\_\\_ approach","level":3},{"line":160,"heading":"Creating elements on the fly","level":3},{"line":233,"heading":"Iterators","level":2},{"line":383,"heading":"Can Sentence have a \\_\\_next\\_\\_ method?","level":3},{"line":401,"heading":"Generators: Using the yield keyword","level":2},{"line":499,"heading":"Generators in classes","level":3},{"line":580,"heading":"Generators, Iterators, Iterables?","level":2},{"line":591,"heading":"Conclusions","level":2}]},"bc2be2c5e88a22442f34509715f107528daa21b6e7173147c14a36883a462707":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"Data Descriptors: Bringing Attributes to the Next level","level":1},{"line":6,"heading":"Properties are Descriptors","level":2},{"line":104,"heading":"Develop your own Descriptors","level":2},{"line":390,"heading":"Only Setters","level":3},{"line":420,"heading":"Accessing the Owner Class with ``set_name``","level":2},{"line":484,"heading":"Taking care of inheritance","level":3},{"line":527,"heading":"Taking care of inheritance","level":3},{"line":528,"heading":"Subclassing built-in data types","level":4},{"line":559,"heading":"Checking ownership","level":4},{"line":604,"heading":"Conclusions","level":2}]},"e5f72dd45fd38775598695bbd05daf23fd35584a5a600be97536b0189f1d23f7":{"links":[],"embeds":[],"tags":[],"headings":[{"line":26,"heading":"Understanding the Network","level":1},{"line":76,"heading":"The DNS Infrastructure","level":1},{"line":112,"heading":"Static IP and Port Forwarding","level":1}]},"f4851aa43e524efc3f0c68bfc8ce180c33107262649e37f884b1a5a999fca850":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"Make your package installable through conda","level":1}]},"3d6b8b981c09bee24eaae55a1e8f12f3f55630d0481348c0f667a2264a2d15b9":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"Upload your package to PyPI","level":1}]},"5f07c6ebacc462ecbc9b694b22d65403d81856f848576c5573f55e109157f002":{"links":[],"embeds":[],"tags":[],"headings":[]},"b74c3d53eb4cf351156cfba4d2cec3c18c24289747e39cdca6c466f37715a536":{"links":[],"embeds":[{"line":80,"link":"/images/35_images/01_firefox.png","original":"![Firefox with developers tools](/images/35_images/01_firefox.png)","beforeContext":"","afterContext":""},{"line":88,"link":"/images/35_images/02_firefox.png","original":"![Selecting the appropriate div](/images/35_images/02_firefox.png)","beforeContext":"","afterContext":""}],"tags":[],"headings":[{"line":35,"heading":"Downloading and Parsing a Website","level":1},{"line":185,"heading":"Threading the Requests","level":1}]},"680fcf222e56430cda800db9f9048cd295b674766d574a88d0d2aa6692fbf297":{"links":[],"embeds":[],"tags":[],"headings":[{"line":14,"heading":"Configure a Server","level":1},{"line":17,"heading":"Other Things","level":1}]},"1f701de8c5ff328c47621016465977355188964d427db329554e6712a80556a1":{"links":[],"embeds":[],"tags":[],"headings":[{"line":0,"heading":"Using Cookiecutter to Generate Project Templates","level":1},{"line":6,"heading":"Installing","level":2},{"line":15,"heading":"Getting Started","level":2},{"line":30,"heading":"Getting Started with Templates","level":2}]},"c3afcae5b0029b1e1177e1f6317e945c2a2fed99a7c488164467069996dcbaef":{"links":[],"embeds":[],"tags":[],"headings":[{"line":10,"heading":"Installing","level":2},{"line":25,"heading":"HDF5 Viewer","level":3},{"line":28,"heading":"Basic Saving and Reading Data","level":2},{"line":94,"heading":"Selective Reading from HDF5 files","level":2},{"line":193,"heading":"Selective Writing to HDF5 Files","level":2},{"line":253,"heading":"Specify Data Types to Optimize Space","level":2},{"line":362,"heading":"Compressing Data","level":2},{"line":415,"heading":"Resizing Datasets","level":2},{"line":485,"heading":"Save Data in Chunks","level":2},{"line":512,"heading":"Organizing Data with Groups","level":2},{"line":619,"heading":"Storing Metadata in HDF5","level":2},{"line":714,"heading":"Final thoughts on HDF5","level":2}]}},"algorithmVersion":9}